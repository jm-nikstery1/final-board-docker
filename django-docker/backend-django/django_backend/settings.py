"""
Django settings for django_backend project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path

try:
    import pymysql

    pymysql.version_info = (1, 4, 3, "final", 0)
    pymysql.install_as_MySQLdb()

except Exception:
    ...

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-j%9146orl=u=aky@ttdv3=0%*c6l-o9dema^4ryg3#(9%jaz#d"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1',
                 'localhost',
                 ]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'django.contrib.sites',

    'rest_framework',
    'rest_framework.authtoken',  # dj rest auth 에서 소셜 로그인에 사용 - restframework에서 자체적인 token 생성

    'rest_framework_simplejwt',   # jwt 인증방식
    "rest_framework_simplejwt.token_blacklist",  #jwt 토큰 로그아웃 처리

    "dj_rest_auth",  # dj-rest-auth - 공식 문서상 순서가 이런순

    'django_filters',
    'drf_spectacular',    # API 자동화 문서

    'corsheaders',    # CORS

    # Oauth 2.0
    'allauth',
    'allauth.account',

    "dj_rest_auth.registration",  # dj-rest-auth

    # dj rest auth 공식문서상 순서가 이런순
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',  # 구글 Oauth

    # 커스텀 app
    'users',
    'board',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",

    "corsheaders.middleware.CorsMiddleware",
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = "django_backend.urls"


AUTH_USER_MODEL = "users.MyUser" 


CORS_ORIGIN_ALLOW_ALL = True   # 모든 호스트 허용 - CORS_ALLOWED_ORIGINS 여기 선택된 사이트만 되게하기용
CORS_ALLOW_CREDENTIALS = True  #쿠키가 cross-site HTTP 요청에 포함


# CORS 설정
CORS_ALLOWED_ORIGINS = [
    "http://127.0.0.1:5173",
    "http://localhost:5173",
    "http://127.0.0.1:8000",
    "http://localhost:8000",
]

# CSRF 설정
CSRF_TRUSTED_ORIGINS = [
    "http://127.0.0.1:5173",
    "http://localhost:5173",
    "http://127.0.0.1:8000",
    "http://localhost:8000",
]



TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "django_backend.wsgi.application"




# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
    #"default": {
    #     "ENGINE": "django.db.backends.mysql",
    #     "NAME": "django_db",
    #     "USER": "root",
    #     "PASSWORD": "password",
    #     "HOST": "127.0.0.1",
    #     "PORT": 3306,
    #}
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "ko-kr"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.getenv("STATIC_ROOT", default=os.path.join(BASE_DIR, STATIC_URL))

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
]


REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_FILTER_BACKENDS": ("django_filters.rest_framework.DjangoFilterBackend",),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "DATETIME_FORMAT": "%Y-%m-%d %H:%M:%S", 
    "PAGE_SIZE": 100,

    "DEFAULT_AUTHENTICATION_CLASSES": [
        'dj_rest_auth.jwt_auth.JWTCookieAuthentication',    
        "rest_framework_simplejwt.authentication.JWTAuthentication",  
        "rest_framework.authentication.BasicAuthentication",
        'rest_framework.authentication.SessionAuthentication',  # session 인증
        "rest_framework.authentication.TokenAuthentication",    # token 인증
        
    ], 

}


SPECTACULAR_SETTINGS = {
    # General schema metadata. Refer to spec for valid inputs
    # https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#openapi-object
    "TITLE": "게시판 개발을 위한 API 문서",
    "DESCRIPTION": "게시판 개발을 위한 API문서 입니다."
                   "사용자 model을 username 대신 email로 기준으로 해서 개발했습니다"
                   "Authorize 에서 basicAuth 에서 username 대신 email으로 입력해야 권한 허용이 됩니다",

    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,  
}



### Oauth
SITE_ID = 1   # admin 사이트 사용을 위해서 중요


ACCOUNT_EMAIL_REQUIRED = True   # email 필드 사용 o
ACCOUNT_USERNAME_REQUIRED = True  # username 필드 사용 x 
ACCOUNT_AUTHENTICATION_METHOD = "email"
#ACCOUNT_EMAIL_VERIFICATION = "none"   # 이메일 확인용 메일 전송 하는것 - True 로 하면 이메일 확인 될때까지 로그인 금지 - 밑에 email 인증 확인

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
            'openid',

        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'OAUTH_PKCE_ENABLED': True,

        'EMAIL_AUTHENTICATION': True,
    }
}


#ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'http' - URL을 생성할 때 사용되는 기본 프로토콜 - https도 가능
#ACCOUNT_LOGIN_BY_CODE_TIMEOUT = '숫자' - 이메일 인증으로 보낸 메일의 수명시간
#ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE - 가입시 비밀번호 실수를 방지하기 위한 - 비밀번호 2번 입력

# dj-rest-auth config, https://dj-rest-auth.readthedocs.io/en/latest/configuration.html
REST_AUTH = {
    "TOKEN_MODEL": None,  # jwt token 사용함
    "USE_JWT": True,  # jwt token based auth를 위해 True
    "JWT_AUTH_HTTPONLY": False,  # refresh_token를 사용할 예정이라면, False로 설정을 바꿔야한다.

    # dj rest auth 공식문서 - 쿠키의 키 이름도 정해야함
    'JWT_AUTH_COOKIE': 'my-app-auth',
    'JWT_AUTH_REFRESH_COOKIE': 'my-refresh-token',

    "REGISTER_SERIALIZER": "users.serializers.UserRegisterSerializer",  #UserRegisterSerializer 를 따로 생성했으면 사용하는것
}


'''
이메일 인증 부분
'''
"""
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'  # 실제 이메일 보내기
#EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"  # 콘솔로 이메일 보내기 - 실제로는 이메일이 안감
EMAIL_HOST = 'smtp.gmail.com'  # gmail 메일 호스트 서버
EMAIL_PORT = '587'  # gmail과 통신하는 포트
EMAIL_HOST_USER = '이메일주소@gmail.com'
EMAIL_HOST_PASSWORD =''  # 유출되면 안되는 비밀번호

EMAIL_USE_TLS = True  # TLS 보안 방법 -

ACCOUNT_CONFIRM_EMAIL_ON_GET = True  # 유저가 받은 링크를 클릭하면 회원가입 완료되게끔

ACCOUNT_EMAIL_VERIFICATION = "mandatory"
# ACCOUNT_EMAIL_VERIFICATION = "none"

EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = '/' # 사이트와 관련한 자동응답을 받을 이메일 주소,'localhost'

ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1

# 이메일에 자동으로 표시되는 사이트 정보
ACCOUNT_EMAIL_SUBJECT_PREFIX = "이메일 인증"

"""




from datetime import timedelta

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=5),   # 짧아도 refresh 토큰으로 재발급이 쉽다
    "REFRESH_TOKEN_LIFETIME": timedelta(minutes=120),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": True,  # True로 설정될 경우, 기존에 있던 refresh token은 blacklist가 됨
    "UPDATE_LAST_LOGIN": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
    "JSON_ENCODER": None,
    "JWK_URL": None,
    "LEEWAY": 0,

    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",

    "USER_ID_FIELD": "id",  # db에 저장된 user model 필드가 user를 확인하기 위해 생성된 토큰들을 포함
    "USER_ID_CLAIM": "myuser_id",  # 생선된 토큰을 user 식별자를 저장

    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",

    "JTI_CLAIM": "jti",

    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),

    "TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainPairSerializer",
    "TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSerializer",
    "TOKEN_VERIFY_SERIALIZER": "rest_framework_simplejwt.serializers.TokenVerifySerializer",
    "TOKEN_BLACKLIST_SERIALIZER": "rest_framework_simplejwt.serializers.TokenBlacklistSerializer",
    "SLIDING_TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainSlidingSerializer",
    "SLIDING_TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSlidingSerializer",
}
